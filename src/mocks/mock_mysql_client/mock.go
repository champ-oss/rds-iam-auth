// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/mysql_client/mysql_client.go

// Package mock_mysql_client is a generated GoMock package.
package mock_mysql_client

import (
	sql "database/sql"
	reflect "reflect"

	common "github.com/champ-oss/rds-iam-auth/pkg/common"
	gomock "github.com/golang/mock/gomock"
)

// MockMysqlClientInterface is a mock of MysqlClientInterface interface.
type MockMysqlClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlClientInterfaceMockRecorder
}

// MockMysqlClientInterfaceMockRecorder is the mock recorder for MockMysqlClientInterface.
type MockMysqlClientInterfaceMockRecorder struct {
	mock *MockMysqlClientInterface
}

// NewMockMysqlClientInterface creates a new mock instance.
func NewMockMysqlClientInterface(ctrl *gomock.Controller) *MockMysqlClientInterface {
	mock := &MockMysqlClientInterface{ctrl: ctrl}
	mock.recorder = &MockMysqlClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlClientInterface) EXPECT() *MockMysqlClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMysqlClientInterface) Connect(mySQLConnectionInfo common.MySQLConnectionInfo) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", mySQLConnectionInfo)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockMysqlClientInterfaceMockRecorder) Connect(mySQLConnectionInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMysqlClientInterface)(nil).Connect), mySQLConnectionInfo)
}
